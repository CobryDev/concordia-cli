name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Check dependencies
        run: |
          python -c "import pytest, pytest_cov, pytest_mock, black, isort, bandit; print('[PASS] All test dependencies installed')"

      - name: Lint code with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 actions/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Treat all other issues as warnings
          flake8 actions/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: CI-equivalent checks (format, isort, mypy, bandit, coverage)
        run: |
          python run_tests.py ci --no-deps

      - name: Run unit tests
        run: |
          python run_tests.py unit --no-deps

      - name: Run integration tests
        run: |
          python run_tests.py integration --no-deps

      - name: Run full test suite with coverage
        run: |
          python run_tests.py coverage --no-deps

      - name: Upload coverage reports to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  test-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The testing framework validated:" >> $GITHUB_STEP_SUMMARY
            echo "- Unit tests for core business logic" >> $GITHUB_STEP_SUMMARY
            echo "- Integration tests for CLI commands" >> $GITHUB_STEP_SUMMARY
            echo "- Code coverage requirements (≥80%)" >> $GITHUB_STEP_SUMMARY
            echo "- Cross-platform compatibility" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the test results above and fix any issues." >> $GITHUB_STEP_SUMMARY
          fi
